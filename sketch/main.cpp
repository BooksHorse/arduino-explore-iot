// Ultrasonic - Version: Latest
#include <Ultrasonic.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/22ef9aa2-03ce-4a4e-a6f3-7453fa02b5e4

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes
  are made to the Thing

  String bocchi_data;
  String dashboard_data;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have
  functions which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this
  sketch.
*/

Ultrasonic in(5, 4, 4000UL);
Ultrasonic out(2, 3, 4000UL);
bool inult = false;
bool outult = false;

#include "thingProperties.h"
#define TOUCH00 20
#define TOUCH01 16
#define TOUCH02 17
int touch00_state = -1;
int touch01_state = -1;
int touch02_state = -1;
bool noalarm = false;
bool isTone = false;

time_t touch00_notFound_time;
time_t touch01_notFound_time;
time_t touch02_notFound_time;
namespace bocchi {

namespace item_watcher {

String get_status() {
  String status = String("");
  status += "Item1 = ";
  if (touch00_state == 1) {
    status += "Notfound (Lost item at ";
    status += ctime(&touch00_notFound_time);
    status += ")";
  } else {
    status += "Normal";
  }
  status += "\n";
  status += "Item2 = ";
  if (touch01_state == 1) {
    status += "Notfound (Lost item at ";
    status += ctime(&touch01_notFound_time);
    status += ")";
  } else {
    status += "Normal";
  }
  status += "\n";
  status += "Item3 = ";
  if (touch02_state == 1) {
    status += "Notfound (Lost item at ";
    status += ctime(&touch02_notFound_time);
    status += ")";
  } else {
    status += "Normal";
  }
  status += "\n";
  return status;
}
int setup() {
  // TOUCH## on physical board
  pinMode(TOUCH00, INPUT_PULLUP); // TOUCH00
  pinMode(TOUCH01, INPUT_PULLUP); // TOUCH01
  pinMode(TOUCH02, INPUT_PULLUP); // TOUCH02
  touch00_state = digitalRead(TOUCH00);
  touch01_state = digitalRead(TOUCH01);
  touch02_state = digitalRead(TOUCH02);
  return 0;
}
int onItemChangeEvent(int pin, int oldState, int newState) {
  String text = String("");
  text += "bocchi::item_watcher::onItemChangeEvent, State Changed!: {pin:";
  text += pin;
  text += ",oldState:";
  text += oldState;
  text += ",newState:";
  text += newState;
  text += "}\n";
  Serial.print(text);
  dashboard_data = text;
  return 0;
}
int loop() {
  {
    int new_state = digitalRead(TOUCH00);

    if (touch00_state != new_state) {
      onItemChangeEvent(TOUCH00, touch00_state, new_state);
      touch00_state = new_state;
      if (new_state == 1) {
        touch00_notFound_time = ArduinoCloud.getLocalTime();
      }
    }
  }
  {
    int new_state = digitalRead(TOUCH01);

    if (touch01_state != new_state) {
      onItemChangeEvent(TOUCH01, touch01_state, new_state);
      touch01_state = new_state;
      if (new_state == 1) {
        touch01_notFound_time = ArduinoCloud.getLocalTime();
      }
    }
  }
  {
    int new_state = digitalRead(TOUCH02);

    if (touch02_state != new_state) {
      onItemChangeEvent(TOUCH02, touch02_state, new_state);
      touch02_state = new_state;
      if (new_state == 1) {
        touch02_notFound_time = ArduinoCloud.getLocalTime();
      }
    }
  }
  return 0;
}
} // namespace item_watcher

namespace status {
int update_status() {
  String item_status = bocchi::item_watcher::get_status();
  bocchi_data = item_status;
  bocchi_data += "alarm_running = ";
  bocchi_data += isTone ? "True" : "False";
  bocchi_data += "\n";
  bocchi_data += "alarm_disabled = ";
  bocchi_data += noalarm ? "True" : "False";
  bocchi_data += "\n";
  return 0;
}
} // namespace status
} // namespace bocchi

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking
  // if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  bocchi::item_watcher::setup();

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
  peoplecount = 0;
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  bocchi::item_watcher::loop();
  bocchi::status::update_status();
  {
    static unsigned long lastms = millis();
    if (inult || ? millis() > lastms + 700 : millis() > lastms + 50) {
      lastms = millis();
      int indist = in.read();
      int outdist = out.read();
      Serial.print("IN:");
      Serial.print(indist);
      Serial.print(",OUT:");
      Serial.println(outdist);
      // inmax = 90
      // outmax = 110
      if (indist < 71 && inult == false && indist != 0) {
        peoplecount += 1;
        inult = true;
      }
      if (indist == 71 || indist == 0) {
        inult = false;
      }

      if (outdist < 71 && outult == false && outdist != 0 && !peoplecount < 1) {
        peoplecount -= 1;
        outult = true;
      }
      if (outdist == 71) {
        outult = false;
      }
    }
  }
  Serial.print("peoplecount:");
  Serial.println(peoplecount);

  if (!noalarm) {
    if (touch00_state == 1 || touch01_state == 1 || touch02_state == 1 ||
        peoplecount > 5) {
      isTone = true;
      int x = millis() / 1000;
      int y = round((1 * sin(0.1 * x) + 1) / 2);
      if (peoplecount > 5) {

        tone(7, (y + 1) * 700);
      } else {
        tone(7, (y + 1) * 2000);
      }

    } else {
      isTone = false;
      noTone(7);
    }
  }
  if (noalarm) {
    isTone = false;
    noTone(7);
  }
}

/*
  Since BocchiData is READ_WRITE variable, onBocchiDataChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBocchiDataChange() {
  // Add your code here to act upon BocchiData change
  Serial.print("bocchi_data: ");
  Serial.println(bocchi_data);
  if (bocchi_data.equals("1")) {
    noalarm = true;
  }
  if (bocchi_data.equals("2")) {
    noalarm = false;
  }
  if (bocchi_data.equals("3")) {
    peoplecount = 0;
  }
}

/*
  Since DashboardData is READ_WRITE variable, onDashboardDataChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDashboardDataChange() {
  // Add your code here to act upon DashboardData change
  Serial.print("dashboard_data: ");
  Serial.println(dashboard_data);
}
